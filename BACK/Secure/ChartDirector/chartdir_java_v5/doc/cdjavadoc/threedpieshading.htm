<HTML>
<HEAD>
<Title>3D Pie Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">3D Pie Shading</p>
<hr class="separator">
<div class="content">
<img src="images/threedpieshading0.png">&nbsp;&nbsp;<img src="images/threedpieshading1.png">&nbsp;&nbsp;<img src="images/threedpieshading2.png">&nbsp;&nbsp;<img src="images/threedpieshading3.png">&nbsp;&nbsp;<img src="images/threedpieshading4.png">&nbsp;&nbsp;<img src="images/threedpieshading5.png">&nbsp;&nbsp;<img src="images/threedpieshading6.png">
<br><br>
This example demonstrates various sector shading effects applicable to 3D pie charts.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/threedpieshading.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="javax.servlet.http.*" %&gt;
&lt;%!
// A simple structure to represent a chart image with an image map
private static class ImageWithHotSpot
{
    String imageURL;
    String imageMap;
}

// Function to create the demo charts
ImageWithHotSpot createChart(HttpServletRequest request, int index)
{
    // The data for the pie chart
    double[] data = {18, 30, 20, 15};

    // The labels for the pie chart
    String[] labels = {"Labor", "Licenses", "Facilities", "Production"};

    // The colors to use for the sectors
    int[] colors = {0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff};

    // Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient
    // color from blue (0000cc) to deep blue (000044) as background. Use rounded
    // corners of 16 pixels radius.
    PieChart c = new PieChart(200, 200);
    c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044)
        );
    c.setRoundedFrame(0xffffff, 16);

    // Set the center of the pie at (100, 100) and the radius to 80 pixels
    c.setPieSize(100, 100, 80);

    // Set the pie data
    c.setData(data, labels);

    // Set the sector colors
    c.setColors2(Chart.DataColor, colors);

    // Draw the pie in 3D with a pie thickness of 20 pixels
    c.set3D(20);

    // Demonstrates various shading modes
    if (index == 0) {
        c.addTitle("Default Shading", "bold", 12, 0xffffff);
    } else if (index == 1) {
        c.addTitle("Flat Gradient", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.FlatShading);
    } else if (index == 2) {
        c.addTitle("Local Gradient", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.LocalGradientShading);
    } else if (index == 3) {
        c.addTitle("Global Gradient", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.GlobalGradientShading);
    } else if (index == 4) {
        c.addTitle("Concave Shading", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.ConcaveShading);
    } else if (index == 5) {
        c.addTitle("Rounded Edge", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.RoundedEdgeShading);
    } else if (index == 6) {
        c.addTitle("Radial Gradient", "bold", 12, 0xffffff);
        c.setSectorStyle(Chart.RadialShading);
    }

    // Disable the sector labels by setting the color to Transparent
    c.setLabelStyle("", 8, Chart.Transparent);

    // Output the chart
    ImageWithHotSpot ret = new ImageWithHotSpot();
    ret.imageURL = c.makeSession(request, "chart" + index);

    // Include tool tip for the chart
    ret.imageMap = c.getHTMLImageMap("", "",
        "title='{label}: US${value}K ({percent}%)'");

    return ret;
}
%&gt;
&lt;%
ImageWithHotSpot chart0 = createChart(request, 0);
ImageWithHotSpot chart1 = createChart(request, 1);
ImageWithHotSpot chart2 = createChart(request, 2);
ImageWithHotSpot chart3 = createChart(request, 3);
ImageWithHotSpot chart4 = createChart(request, 4);
ImageWithHotSpot chart5 = createChart(request, 5);
ImageWithHotSpot chart6 = createChart(request, 6);
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    3D Pie Shading
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart0.imageURL)%&gt;'
    usemap="#map0" border="0"&gt;
&lt;map name="map0"&gt;&lt;%=chart0.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1.imageURL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=chart1.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart2.imageURL)%&gt;'
    usemap="#map2" border="0"&gt;
&lt;map name="map2"&gt;&lt;%=chart2.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart3.imageURL)%&gt;'
    usemap="#map3" border="0"&gt;
&lt;map name="map3"&gt;&lt;%=chart3.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart4.imageURL)%&gt;'
    usemap="#map4" border="0"&gt;
&lt;map name="map4"&gt;&lt;%=chart4.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart5.imageURL)%&gt;'
    usemap="#map5" border="0"&gt;
&lt;map name="map5"&gt;&lt;%=chart5.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart6.imageURL)%&gt;'
    usemap="#map6" border="0"&gt;
&lt;map name="map6"&gt;&lt;%=chart6.imageMap%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/threedpieshading.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class threedpieshading implements DemoModule
{
    //Name of demo program
    public String toString() { return "3D Pie Shading"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 7; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the pie chart
        double[] data = {18, 30, 20, 15};

        // The labels for the pie chart
        String[] labels = {"Labor", "Licenses", "Facilities", "Production"};

        // The colors to use for the sectors
        int[] colors = {0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff};

        // Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient
        // color from blue (0000cc) to deep blue (000044) as background. Use rounded
        // corners of 16 pixels radius.
        PieChart c = new PieChart(200, 200);
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc,
            0x000044));
        c.setRoundedFrame(0xffffff, 16);

        // Set the center of the pie at (100, 100) and the radius to 80 pixels
        c.setPieSize(100, 100, 80);

        // Set the pie data
        c.setData(data, labels);

        // Set the sector colors
        c.setColors2(Chart.DataColor, colors);

        // Draw the pie in 3D with a pie thickness of 20 pixels
        c.set3D(20);

        // Demonstrates various shading modes
        if (index == 0) {
            c.addTitle("Default Shading", "bold", 12, 0xffffff);
        } else if (index == 1) {
            c.addTitle("Flat Gradient", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.FlatShading);
        } else if (index == 2) {
            c.addTitle("Local Gradient", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.LocalGradientShading);
        } else if (index == 3) {
            c.addTitle("Global Gradient", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.GlobalGradientShading);
        } else if (index == 4) {
            c.addTitle("Concave Shading", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.ConcaveShading);
        } else if (index == 5) {
            c.addTitle("Rounded Edge", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.RoundedEdgeShading);
        } else if (index == 6) {
            c.addTitle("Radial Gradient", "bold", 12, 0xffffff);
            c.setSectorStyle(Chart.RadialShading);
        }

        // Disable the sector labels by setting the color to Transparent
        c.setLabelStyle("", 8, Chart.Transparent);

        // Output the chart
        viewer.setImage(c.makeImage());

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{label}: US${value}K ({percent}%)'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new threedpieshading();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);
        frame.getContentPane().setLayout(new FlowLayout(FlowLayout.LEFT));
        frame.setSize(800, 450);

        // Create the charts and put them in the content pane
        for (int i = 0; i &lt; demo.getNoOfCharts(); ++i)
        {
            ChartViewer viewer = new ChartViewer();
            demo.createChart(viewer, i);
            frame.getContentPane().add(viewer);
        }

        // Display the window
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
