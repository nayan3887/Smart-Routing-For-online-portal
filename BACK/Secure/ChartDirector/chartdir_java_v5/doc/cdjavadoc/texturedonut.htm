<HTML>
<HEAD>
<Title>Texture Donut Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Texture Donut Chart</p>
<hr class="separator">
<div class="content">
<img src="images/texturedonut.png">
<br><br>
This example demonstrates wooden, rocky and marble texture effects by using pattern colors to load image patterns.<br><br>
In ChartDirector, metallic and pattern colors are just like normal ARGB colors, and are represented as a 32-bit integer. They can be applied to anything that can be colored. In this example, metallic colors are applied to the background, while pattern colors are applied to the donut slices to create texture effects.<br><br>
<ul><li> <a href="BaseChart.patternColor2.htm">BaseChart.patternColor2</a> is used to load the texture images. It returns an array of integers representing the pattern colors created from the images.<br><br>
<li> The pattern colors are then set into the <a href="Chart.DataColor.htm">DataColor</a> positions of the default palette using <a href="BaseChart.setColor.htm">BaseChart.setColor</a>. These colors will be used for the sectors.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/texturedonut.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%
// The data for the pie chart
double[] data = {18, 45, 28};

// The labels for the pie chart
String[] labels = {"Marble", "Wood", "Granite"};

// The icons for the sectors
String[] texture = {"marble3.png", "wood.png", "rock.png"};

// Create a PieChart object of size 400 x 330 pixels, with a metallic green (88EE88)
// background, black border and 1 pixel 3D border effect
PieChart c = new PieChart(400, 330, Chart.metalColor(0x88ee88), 0x000000, 1);

//Set search path to current JSP directory for loading icon images
c.setSearchPath(getServletConfig().getServletContext(), request);

// Set donut center at (200, 160), and outer/inner radii as 120/60 pixels
c.setDonutSize(200, 160, 120, 60);

// Add a title box using 15 pts Times Bold Italic font and metallic deep green
// (008000) background color
c.addTitle("Material Composition", "Times New Roman Bold Italic", 15).setBackground(
    Chart.metalColor(0x008000));

// Set the pie data and the pie labels
c.setData(data, labels);

// Set the colors of the sectors to the 3 texture patterns
c.setColor(Chart.DataColor + 0, c.patternColor2(texture[0]));
c.setColor(Chart.DataColor + 1, c.patternColor2(texture[1]));
c.setColor(Chart.DataColor + 2, c.patternColor2(texture[2]));

// Draw the pie in 3D with a 3D depth of 30 pixels
c.set3D(30);

// Use 12 pts Arial Bold Italic as the sector label font
c.setLabelStyle("Arial Bold Italic", 12);

// Output the chart
String chart1URL = c.makeSession(request, "chart1");

// Include tool tip for the chart
String imageMap1 = c.getHTMLImageMap("", "",
    "title='{label}: {value}kg ({percent}%)'");
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Texture Donut Chart
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1URL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=imageMap1%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/texturedonut.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class texturedonut implements DemoModule
{
    //Name of demo program
    public String toString() { return "Texture Donut Chart"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 1; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the pie chart
        double[] data = {18, 45, 28};

        // The labels for the pie chart
        String[] labels = {"Marble", "Wood", "Granite"};

        // The icons for the sectors
        String[] texture = {"marble3.png", "wood.png", "rock.png"};

        // Create a PieChart object of size 400 x 330 pixels, with a metallic green
        // (88EE88) background, black border and 1 pixel 3D border effect
        PieChart c = new PieChart(400, 330, Chart.metalColor(0x88ee88), 0x000000, 1);

        // Set donut center at (200, 160), and outer/inner radii as 120/60 pixels
        c.setDonutSize(200, 160, 120, 60);

        // Add a title box using 15 pts Times Bold Italic font and metallic deep
        // green (008000) background color
        c.addTitle("Material Composition", "Times New Roman Bold Italic", 15
            ).setBackground(Chart.metalColor(0x008000));

        // Set the pie data and the pie labels
        c.setData(data, labels);

        // Set the colors of the sectors to the 3 texture patterns
        c.setColor(Chart.DataColor + 0, c.patternColor2(texture[0]));
        c.setColor(Chart.DataColor + 1, c.patternColor2(texture[1]));
        c.setColor(Chart.DataColor + 2, c.patternColor2(texture[2]));

        // Draw the pie in 3D with a 3D depth of 30 pixels
        c.set3D(30);

        // Use 12 pts Arial Bold Italic as the sector label font
        c.setLabelStyle("Arial Bold Italic", 12);

        // Output the chart
        viewer.setImage(c.makeImage());

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{label}: {value}kg ({percent}%)'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new texturedonut();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);

        // Create the chart and put them in the content pane
        ChartViewer viewer = new ChartViewer();
        demo.createChart(viewer, 0);
        frame.getContentPane().add(viewer);

        // Display the window
        frame.pack();
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
