<HTML>
<HEAD>
<Title>Percentage Area Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Percentage Area Chart</p>
<hr class="separator">
<div class="content">
<img src="images/percentarea.png">
<br><br>
This example demonstrates creating a percentage area chart. It also demonstrates how to include icons in the legend box using <a href="cdml.htm">CDML</a>.<br><br>
A percentage area chart is like a stacked area chart, except the areas are individually scaled so that they stacked up to 100.<br><br>
Note that in this example, the legend box contains icons. This is achieved by including the icons in the data set name using <a href="cdml.htm">CDML</a>.<br><br>
The key features demonstrated in this example are:<br><br>
<ul><li> Add a legend to the chart using <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a>, and set the key size (the color box to the right of each legend entry) to 16 x 32 pixels using <a href="LegendBox.setKeySize.htm">LegendBox.setKeySize</a>. This is to better match the size of the icons.<br><br>
<li> Reverse the legend box entries using <a href="Layer.setLegend.htm">Layer.setLegend</a>, so that the last data set name is on top in the legend box. This is useful for a vertical legend box in a vertical stacked chart with purely positive data. In such case, the last data set will be stacked to the top. Reversing the legend box will make the legend keys visually consistent with the stacking order of the chart.<br><br>
<li> Add a percentage area layer using <a href="XYChart.addAreaLayer2.htm">XYChart.addAreaLayer2</a> with the <a href="Chart.Percentage.htm">Percentage</a> predefined constant.<br><br>
<li> Add multiple data sets to the area layer using <a href="Layer.addDataSet.htm">Layer.addDataSet</a>, with data set names expressed using <a href="cdml.htm">CDML</a> to include icons.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/percentarea.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="java.util.*" %&gt;
&lt;%
// The data for the area chart
double[] data0 = {42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56,
    60, 70, 76, 63, 67, 75, 64, 51};
double[] data1 = {50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58,
    59, 73, 77, 84, 82, 80, 84, 98};
double[] data2 = {87, 89, 85, 66, 53, 39, 24, 21, 37, 56, 37, 23, 21, 33, 13, 17, 14,
    23, 16, 25, 29, 30, 45, 47, 46};

// The timestamps on the x-axis
Date[] labels = {new GregorianCalendar(1996, 0, 1).getTime(), new GregorianCalendar(
    1996, 3, 1).getTime(), new GregorianCalendar(1996, 6, 1).getTime(),
    new GregorianCalendar(1996, 9, 1).getTime(), new GregorianCalendar(1997, 0, 1
    ).getTime(), new GregorianCalendar(1997, 3, 1).getTime(), new GregorianCalendar(
    1997, 6, 1).getTime(), new GregorianCalendar(1997, 9, 1).getTime(),
    new GregorianCalendar(1998, 0, 1).getTime(), new GregorianCalendar(1998, 3, 1
    ).getTime(), new GregorianCalendar(1998, 6, 1).getTime(), new GregorianCalendar(
    1998, 9, 1).getTime(), new GregorianCalendar(1999, 0, 1).getTime(),
    new GregorianCalendar(1999, 3, 1).getTime(), new GregorianCalendar(1999, 6, 1
    ).getTime(), new GregorianCalendar(1999, 9, 1).getTime(), new GregorianCalendar(
    2000, 0, 1).getTime(), new GregorianCalendar(2000, 3, 1).getTime(),
    new GregorianCalendar(2000, 6, 1).getTime(), new GregorianCalendar(2000, 9, 1
    ).getTime(), new GregorianCalendar(2001, 0, 1).getTime(), new GregorianCalendar(
    2001, 3, 1).getTime(), new GregorianCalendar(2001, 6, 1).getTime(),
    new GregorianCalendar(2001, 9, 1).getTime(), new GregorianCalendar(2002, 0, 1
    ).getTime()};

// Create a XYChart object of size 500 x 280 pixels, using 0xffffcc as background
// color, with a black border, and 1 pixel 3D border effect
XYChart c = new XYChart(500, 280, 0xffffcc, 0, 1);

//Set search path to current JSP directory for loading icon images
c.setSearchPath(getServletConfig().getServletContext(), request);

// Set the plotarea at (50, 45) and of size 320 x 200 pixels with white background.
// Enable horizontal and vertical grid lines using the grey (0xc0c0c0) color.
c.setPlotArea(50, 45, 320, 200, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0);

// Add a legend box at (370, 45) using vertical layout and 8 points Arial Bold font.
LegendBox legendBox = c.addLegend(370, 45, true, "Arial Bold", 8);

// Set the legend box background and border to transparent
legendBox.setBackground(Chart.Transparent, Chart.Transparent);

// Set the legend box icon size to 16 x 32 pixels to match with custom icon size
legendBox.setKeySize(16, 32);

// Add a title to the chart using 14 points Times Bold Itatic font and white font
// color, and 0x804020 as the background color
c.addTitle("Quarterly Product Sales", "Times New Roman Bold Italic", 14, 0xffffff
    ).setBackground(0x804020);

// Set the labels on the x axis.
c.xAxis().setLabels2(labels);

// Set multi-style axis label formatting. Start of year labels are displayed as yyyy.
// For other labels, just show minor tick.
c.xAxis().setMultiFormat(Chart.StartOfYearFilter(), "{value|yyyy}",
    Chart.AllPassFilter(), "-");

// Add a percentage area layer to the chart
AreaLayer layer = c.addAreaLayer2(Chart.Percentage);

// Add the three data sets to the area layer, using icons images with labels as data
// set names
layer.addDataSet(data0, 0x40ddaa77,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;");
layer.addDataSet(data1, 0x40aadd77,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;");
layer.addDataSet(data2, 0x40aa77dd,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;");

// For a vertical stacked chart with positive data only, the last data set is always
// on top. However, in a vertical legend box, the last data set is at the bottom.
// This can be reversed by using the setLegend method.
layer.setLegend(Chart.ReverseLegend);

// Output the chart
String chart1URL = c.makeSession(request, "chart1");

// Include tool tip for the chart
String imageMap1 = c.getHTMLImageMap("", "",
    "title='{dataSetName} sales at {xLabel|yyyy} Q{=({xLabel|m}+2)/3|0}: " +
    "US${value}K ({percent}%)'");
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Percentage Area Chart
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1URL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=imageMap1%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/percentarea.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import ChartDirector.*;

public class percentarea implements DemoModule
{
    //Name of demo program
    public String toString() { return "Percentage Area Chart"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 1; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the area chart
        double[] data0 = {42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51,
            56, 56, 60, 70, 76, 63, 67, 75, 64, 51};
        double[] data1 = {50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67,
            67, 58, 59, 73, 77, 84, 82, 80, 84, 98};
        double[] data2 = {87, 89, 85, 66, 53, 39, 24, 21, 37, 56, 37, 23, 21, 33, 13,
            17, 14, 23, 16, 25, 29, 30, 45, 47, 46};

        // The timestamps on the x-axis
        Date[] labels = {new GregorianCalendar(1996, 0, 1).getTime(),
            new GregorianCalendar(1996, 3, 1).getTime(), new GregorianCalendar(1996,
            6, 1).getTime(), new GregorianCalendar(1996, 9, 1).getTime(),
            new GregorianCalendar(1997, 0, 1).getTime(), new GregorianCalendar(1997,
            3, 1).getTime(), new GregorianCalendar(1997, 6, 1).getTime(),
            new GregorianCalendar(1997, 9, 1).getTime(), new GregorianCalendar(1998,
            0, 1).getTime(), new GregorianCalendar(1998, 3, 1).getTime(),
            new GregorianCalendar(1998, 6, 1).getTime(), new GregorianCalendar(1998,
            9, 1).getTime(), new GregorianCalendar(1999, 0, 1).getTime(),
            new GregorianCalendar(1999, 3, 1).getTime(), new GregorianCalendar(1999,
            6, 1).getTime(), new GregorianCalendar(1999, 9, 1).getTime(),
            new GregorianCalendar(2000, 0, 1).getTime(), new GregorianCalendar(2000,
            3, 1).getTime(), new GregorianCalendar(2000, 6, 1).getTime(),
            new GregorianCalendar(2000, 9, 1).getTime(), new GregorianCalendar(2001,
            0, 1).getTime(), new GregorianCalendar(2001, 3, 1).getTime(),
            new GregorianCalendar(2001, 6, 1).getTime(), new GregorianCalendar(2001,
            9, 1).getTime(), new GregorianCalendar(2002, 0, 1).getTime()};

        // Create a XYChart object of size 500 x 280 pixels, using 0xffffcc as
        // background color, with a black border, and 1 pixel 3D border effect
        XYChart c = new XYChart(500, 280, 0xffffcc, 0, 1);

        // Set the plotarea at (50, 45) and of size 320 x 200 pixels with white
        // background. Enable horizontal and vertical grid lines using the grey
        // (0xc0c0c0) color.
        c.setPlotArea(50, 45, 320, 200, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0);

        // Add a legend box at (370, 45) using vertical layout and 8 points Arial
        // Bold font.
        LegendBox legendBox = c.addLegend(370, 45, true, "Arial Bold", 8);

        // Set the legend box background and border to transparent
        legendBox.setBackground(Chart.Transparent, Chart.Transparent);

        // Set the legend box icon size to 16 x 32 pixels to match with custom icon
        // size
        legendBox.setKeySize(16, 32);

        // Add a title to the chart using 14 points Times Bold Itatic font and white
        // font color, and 0x804020 as the background color
        c.addTitle("Quarterly Product Sales", "Times New Roman Bold Italic", 14,
            0xffffff).setBackground(0x804020);

        // Set the labels on the x axis.
        c.xAxis().setLabels2(labels);

        // Set multi-style axis label formatting. Start of year labels are displayed
        // as yyyy. For other labels, just show minor tick.
        c.xAxis().setMultiFormat(Chart.StartOfYearFilter(), "{value|yyyy}",
            Chart.AllPassFilter(), "-");

        // Add a percentage area layer to the chart
        AreaLayer layer = c.addAreaLayer2(Chart.Percentage);

        // Add the three data sets to the area layer, using icons images with labels
        // as data set names
        layer.addDataSet(data0, 0x40ddaa77,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;");
        layer.addDataSet(data1, 0x40aadd77,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;");
        layer.addDataSet(data2, 0x40aa77dd,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;");

        // For a vertical stacked chart with positive data only, the last data set is
        // always on top. However, in a vertical legend box, the last data set is at
        // the bottom. This can be reversed by using the setLegend method.
        layer.setLegend(Chart.ReverseLegend);

        // Output the chart
        viewer.setImage(c.makeImage());

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{dataSetName} sales at {xLabel|yyyy} Q{=({xLabel|m}+2)/3|0}: " +
            "US${value}K ({percent}%)'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new percentarea();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);

        // Create the chart and put them in the content pane
        ChartViewer viewer = new ChartViewer();
        demo.createChart(viewer, 0);
        frame.getContentPane().add(viewer);

        // Display the window
        frame.pack();
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
