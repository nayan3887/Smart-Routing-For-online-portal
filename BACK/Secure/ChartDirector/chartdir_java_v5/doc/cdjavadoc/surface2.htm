<HTML>
<HEAD>
<Title>Surface Chart (2)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Surface Chart (2)</p>
<hr class="separator">
<div class="content">
<img src="images/surface2.jpg">
<br><br>
This example extends the <a href="surface.htm">Surface Chart (1)</a> example by adding surface grid and contour lines, and using alternative view angles and continuous coloring.<br><br>
<ul><li> The alternative view angles are set using <a href="SurfaceChart.setViewAngle.htm">SurfaceChart.setViewAngle</a>.<br><br>
<li> The surface grid lines are added using <a href="SurfaceChart.setSurfaceAxisGrid.htm">SurfaceChart.setSurfaceAxisGrid</a>.<br><br>
<li> The contour lines are added using <a href="SurfaceChart.setContourColor.htm">SurfaceChart.setContourColor</a>.<br><br>
<li> Note that for both the surface grid and contour lines, semi-transparent line colors are used to make the lines look thin and light.<br><br>
<li> Continuous coloring are configured using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/surface2.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%
// The x and y coordinates of the grid
double[] dataX = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
double[] dataY = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};

// The values at the grid points. In this example, we will compute the values using
// the formula z = sin((x - 0.5) * 2 * pi) * sin((y - 0.5) * 2 * pi)
double[] dataZ = new double[(dataX.length) * (dataY.length)];
for (int yIndex = 0; yIndex &lt; dataY.length; ++yIndex) {
    double y = (dataY[yIndex] - 0.5) * 2 * 3.1416;
    for (int xIndex = 0; xIndex &lt; dataX.length; ++xIndex) {
        double x = (dataX[xIndex] - 0.5) * 2 * 3.1416;
        dataZ[yIndex * (dataX.length) + xIndex] = Math.sin(x) * Math.sin(y);
    }
}

// Create a SurfaceChart object of size 720 x 540 pixels
SurfaceChart c = new SurfaceChart(720, 540);

// Add a title to the chart using 20 points Times New Roman Italic font
c.addTitle("Quantum Wave Function", "Times New Roman Italic", 20);

// Set the center of the plot region at (360, 245), and set width x depth x height to
// 360 x 360 x 270 pixels
c.setPlotRegion(360, 245, 360, 360, 270);

// Set the elevation and rotation angles to 20 and 30 degrees
c.setViewAngle(20, 30);

// Set the data to use to plot the chart
c.setData(dataX, dataY, dataZ);

// Spline interpolate data to a 80 x 80 grid for a smooth surface
c.setInterpolation(80, 80);

// Set surface grid lines to semi-transparent black (dd000000)
c.setSurfaceAxisGrid(0xdd000000);

// Set contour lines to semi-transparent white (80ffffff)
c.setContourColor(0x80ffffff);

// Add a color axis (the legend) in which the left center is anchored at (645, 270).
// Set the length to 200 pixels and the labels on the right side. Use smooth gradient
// coloring.
c.setColorAxis(645, 270, Chart.Left, 200, Chart.Right).setColorGradient();

// Set the x, y and z axis titles using 10 points Arial Bold font
c.xAxis().setTitle("x/L(x)", "Arial Bold", 10);
c.yAxis().setTitle("y/L(y)", "Arial Bold", 10);
c.zAxis().setTitle("Wave Function Amplitude", "Arial Bold", 10);

// Output the chart
String chart1URL = c.makeSession(request, "chart1", Chart.JPG);
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Surface Chart (2)
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1URL)%&gt;'&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/surface2.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class surface2 implements DemoModule
{
    //Name of demo program
    public String toString() { return "Surface Chart (2)"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 1; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The x and y coordinates of the grid
        double[] dataX = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
        double[] dataY = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};

        // The values at the grid points. In this example, we will compute the values
        // using the formula z = sin((x - 0.5) * 2 * pi) * sin((y - 0.5) * 2 * pi)
        double[] dataZ = new double[(dataX.length) * (dataY.length)];
        for (int yIndex = 0; yIndex &lt; dataY.length; ++yIndex) {
            double y = (dataY[yIndex] - 0.5) * 2 * 3.1416;
            for (int xIndex = 0; xIndex &lt; dataX.length; ++xIndex) {
                double x = (dataX[xIndex] - 0.5) * 2 * 3.1416;
                dataZ[yIndex * (dataX.length) + xIndex] = Math.sin(x) * Math.sin(y);
            }
        }

        // Create a SurfaceChart object of size 720 x 540 pixels
        SurfaceChart c = new SurfaceChart(720, 540);

        // Add a title to the chart using 20 points Times New Roman Italic font
        c.addTitle("Quantum Wave Function", "Times New Roman Italic", 20);

        // Set the center of the plot region at (360, 245), and set width x depth x
        // height to 360 x 360 x 270 pixels
        c.setPlotRegion(360, 245, 360, 360, 270);

        // Set the elevation and rotation angles to 20 and 30 degrees
        c.setViewAngle(20, 30);

        // Set the data to use to plot the chart
        c.setData(dataX, dataY, dataZ);

        // Spline interpolate data to a 80 x 80 grid for a smooth surface
        c.setInterpolation(80, 80);

        // Set surface grid lines to semi-transparent black (dd000000)
        c.setSurfaceAxisGrid(0xdd000000);

        // Set contour lines to semi-transparent white (80ffffff)
        c.setContourColor(0x80ffffff);

        // Add a color axis (the legend) in which the left center is anchored at
        // (645, 270). Set the length to 200 pixels and the labels on the right side.
        // Use smooth gradient coloring.
        c.setColorAxis(645, 270, Chart.Left, 200, Chart.Right).setColorGradient();

        // Set the x, y and z axis titles using 10 points Arial Bold font
        c.xAxis().setTitle("x/L(x)", "Arial Bold", 10);
        c.yAxis().setTitle("y/L(y)", "Arial Bold", 10);
        c.zAxis().setTitle("Wave Function Amplitude", "Arial Bold", 10);

        // Output the chart
        viewer.setImage(c.makeImage());
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new surface2();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);

        // Create the chart and put them in the content pane
        ChartViewer viewer = new ChartViewer();
        demo.createChart(viewer, 0);
        frame.getContentPane().add(viewer);

        // Display the window
        frame.pack();
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
