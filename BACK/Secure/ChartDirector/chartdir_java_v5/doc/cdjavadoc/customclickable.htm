<HTML>
<HEAD>
<Title>Custom Clickable Objects</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Custom Clickable Objects</p>
<hr class="separator">
<div class="content"><img src="images/customclickable_doc.png"><br><br>
In this example, a clickable line chart will be created with legend keys, a title box, a vertical mark with label, and a custom text box. All these objects will be clickable in addition to the lines and the data points.<br><br>
This example also demonstrate how to use client side Javascript as the click handler.<br><br>
The code for this example is listed below.<br><br>
<b>[JSP Version]</b> jspdemo/customclick.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%
// The data for the line chart
double[] data0 = {50, 55, 47, 36, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58,
    59, 73, 77, 84, 82, 80, 84};
double[] data1 = {36, 28, 25, 33, 38, 20, 22, 30, 25, 33, 30, 24, 28, 36, 30, 45, 46,
    42, 48, 45, 43, 52, 64, 70};

// The labels for the line chart
String[] labels = {"Jan-04", "Feb-04", "Mar-04", "Apr-04", "May-04", "Jun-04",
    "Jul-04", "Aug-04", "Sep-04", "Oct-04", "Nov-04", "Dec-04", "Jan-05", "Feb-05",
    "Mar-05", "Apr-05", "May-05", "Jun-05", "Jul-05", "Aug-05", "Sep-05", "Oct-05",
    "Nov-05", "Dec-05"};

// Create an XYChart object of size 600 x 360 pixels, with a light blue (EEEEFF)
// background, black border, 1 pxiel 3D border effect and rounded corners
XYChart c = new XYChart(600, 360, 0xeeeeff, 0x000000, 1);
c.setRoundedFrame();

// Set plotarea at (55, 60) with size of 520 x 240 pixels. Use white (ffffff) as
// background and grey (cccccc) for grid lines
c.setPlotArea(55, 60, 520, 240, 0xffffff, -1, -1, 0xcccccc, 0xcccccc);

// Add a legend box at (55, 58) (top of plot area) using 9 pts Arial Bold font with
// horizontal layout Set border and background colors of the legend box to
// Transparent
LegendBox legendBox = c.addLegend(55, 58, false, "Arial Bold", 9);
legendBox.setBackground(Chart.Transparent);

// Reserve 10% margin at the top of the plot area during auto-scaling to leave space
// for the legends.
c.yAxis().setAutoScale(0.1);

// Add a title to the chart using 15 pts Times Bold Italic font. The text is white
// (ffffff) on a blue (0000cc) background, with glass effect.
ChartDirector.TextBox title = c.addTitle("Monthly Revenue for Year 2000/2001",
    "Times New Roman Bold Italic", 15, 0xffffff);
title.setBackground(0x0000cc, 0x000000, Chart.glassEffect(Chart.ReducedGlare));

// Add a title to the y axis
c.yAxis().setTitle("Month Revenue (USD millions)");

// Set the labels on the x axis. Draw the labels vertical (angle = 90)
c.xAxis().setLabels(labels).setFontAngle(90);

// Add a vertical mark at x = 17 using a semi-transparent purple (809933ff) color and
// Arial Bold font. Attached the mark (and therefore its label) to the top x axis.
Mark mark = c.xAxis2().addMark(17, 0x809933ff, "Merge with Star Tech", "Arial Bold");

// Set the mark line width to 2 pixels
mark.setLineWidth(2);

// Set the mark label font color to purple (0x9933ff)
mark.setFontColor(0x9933ff);

// Add a copyright message at (575, 295) (bottom right of plot area) using Arial Bold
// font
ChartDirector.TextBox copyRight = c.addText(575, 295,
    "(c) Copyright Space Travel Ltd", "Arial Bold");
copyRight.setAlignment(Chart.BottomRight);

// Add a line layer to the chart
LineLayer layer = c.addLineLayer();

// Set the default line width to 3 pixels
layer.setLineWidth(3);

// Add the data sets to the line layer
layer.addDataSet(data0, -1, "Enterprise");
layer.addDataSet(data1, -1, "Consumer");

// Create the image
String chart1URL = c.makeSession(request, "chart1");

// Create an image map for the chart
String chartImageMap = c.getHTMLImageMap("xystub.jsp", "",
    "title='{dataSetName} @ {xLabel} = USD {value|0} millions'");

// Create an image map for the legend box
String legendImageMap = legendBox.getHTMLImageMap(
    "javascript:popMsg('the legend key [{dataSetName}]');", " ",
    "title='This legend key is clickable!'");

// Obtain the image map coordinates for the title, mark, and copyright message. These
// will be used to define the image map inline. (See HTML code below.)
String titleCoor = title.getImageCoor();
String markCoor = mark.getImageCoor();
String copyRightCoor = copyRight.getImageCoor();
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;script type="text/javascript"&gt;
function popMsg(msg) {
    alert("You have clicked on " + msg + ".");
}
&lt;/script&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Custom Clickable Objects
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20px"&gt;
    &lt;a href='viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;'&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;div style="font-size:10pt; font-family:verdana; width:600px; margin-bottom:20px"&gt;
    In the following chart, the lines, legend keys, title, copyright, and the "Merge
    with Star Tech" text are all clickable!
&lt;/div&gt;
&lt;img src="&lt;%=response.encodeURL("getchart.jsp?"+chart1URL)%&gt;" border="0" usemap="#map1"&gt;
&lt;map name="map1"&gt;
&lt;%=chartImageMap%&gt;
&lt;%=legendImageMap%&gt;
&lt;area &lt;%=titleCoor%&gt;  href='javascript:popMsg("the chart title");'
    title='The title is clickable!' /&gt;
&lt;area &lt;%=markCoor%&gt; href='javascript:popMsg("the Merge with Star Tech mark");'
    title='The "Merge with Star Tech" text is clickable!' /&gt;
&lt;area &lt;%=copyRightCoor%&gt; href='javascript:popMsg("the copyright message");'
    title='The copyright text is clickable!' /&gt;
&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br>
The above code is quite similar to most of the sample codes in this documentation, so it will not be discussed in detail. The main difference is the code for creating the image map.<br><br>
The image map in this example consists of multiple parts. The part for the line chart is produced using <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a> with "xystub.jsp" as the handler:<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>String chartImageMap = c.getHTMLImageMap("xystub.jsp", "",
    "title='{dataSetName} @ {xLabel} = USD {value|0} millions'");</pre></div><br>
For demo purpose, "xystub.jsp" simply displays information on what is clicked. It's source code is as follows.<br><br>
<b>[JSP Version]</b> jspdemo/xystub.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Simple Clickable XY Chart Handler
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;div style="font-size:10pt; font-family:verdana;"&gt;
&lt;b&gt;You have clicked on the following chart element :&lt;/b&gt;&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Data Set : &lt;%=request.getParameter("dataSetName")%&gt;&lt;/li&gt;
    &lt;li&gt;X Position : &lt;%=request.getParameter("x")%&gt;&lt;/li&gt;
    &lt;li&gt;X Label : &lt;%=request.getParameter("xLabel")%&gt;&lt;/li&gt;
    &lt;li&gt;Data Value : &lt;%=request.getParameter("value")%&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br>
The image map for the legend keys is produced using <a href="LegendBox.getHTMLImageMap.htm">LegendBox.getHTMLImageMap</a>. In this example, a client side Javascript will be executed when the user clicks on the legend key.<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>String legendImageMap = legendBox.getHTMLImageMap(
    "javascript:popMsg('the legend key [{dataSetName}]');", " ",
    "title='This legend key is clickable!'");</pre></div><br>
As shown above, the "javascript:popMsg(...);" as used in the url parameter of "getHTMLImageMap". The browser will interpret it as a client side Javascript statement to be executed when the &lt;AREA&gt; tag is clicked.<br><br>
Note that the second argument to <a href="LegendBox.getHTMLImageMap.htm">LegendBox.getHTMLImageMap</a> is set to a space character. This argument specifies the HTTP query parameters to be append to the url. In this example, since the url is actually a client side Javascript, no query parameter is necessary. So a space character is used. (We cannot use an empty string, as it means the default query parameters will be used.)<br><br>
The client side Javascript executed in this example just pops up a message.<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>&lt;SCRIPT&gt;
function popMsg(msg) {
    alert("You have clicked on " + msg + ".");
}
&lt;/SCRIPT&gt;</pre></div><br>
Most text messages in ChartDirector are represented as <a href="TextBox.htm">TextBox</a> objects, and their image map coordinates can be retrieved using <a href="Box.getImageCoor.htm">Box.getImageCoor</a>. This allows &lt;AREA&gt; tags for TextBox objects be created easily.<br><br>
(For TextBox, there is no "getHTMLImageMap" method. It is because each TextBox object only has one hot spot. It is more convenient to enter the handler URL and tool tip text directly into the &lt;AREA&gt; tag, rather than generating them using getHTMLImageMap.)<br><br>
In this example, the image map coordinates of the chart title, vertical mark label, and the copyright message are obtained using <a href="Box.getImageCoor.htm">Box.getImageCoor</a>:<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>String titleCoor = title.getImageCoor();
String markCoor = mark.getImageCoor();
String copyRightCoor = copyRight.getImageCoor();</pre></div><br>
The image map coordinates are then used to make &lt;AREA&gt; tags as follows:<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>&lt;area &lt;%=titleCoor%&gt; href='javascript:popMsg("the chart title");'
    title='The title is clickable!'&gt;
&lt;area &lt;%=markCoor%&gt; href='javascript:popMsg("the Merge with Star Tech mark");'
    title='The "Merge with Star Tech" text is clickable!'&gt;
&lt;area &lt;%=copyRightCoor%&gt; href='javascript:popMsg("the copyright message");'
    title='The copyright text is clickable!'&gt;</pre></div></div><br>
<hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
