<HTML>
<HEAD>
<Title>X Zone Coloring</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">X Zone Coloring</p>
<hr class="separator">
<div class="content">
<img src="images/xzonecolor.png">
<br><br>
This example demonstrates using x zone colors - colors that change at certain x value thresholds.<br><br>
In this example, a x zone colors are used as the color of the line, and as the fill color of the band surrounding the line.<br><br>
The x zone color for the line is configured to change from solid blue color to a red dash line color upon reaching a certain x value threshold. The x zone color for the band is configured to change from semi-transparent blue to semi-transparent red upon reaching the same threshold.<br><br>
X zone colors are created using <a href="Layer.xZoneColor.htm">Layer.xZoneColor</a>. You can use a x zone color in any ChartDirector API that expects a color. For instance, you can use a x zone color as background color, fill color of data sets, line color, etc.<br><br>
A single x zone color can support one threshold value and change between two colors. The two colors can be any colors, including another x zone color. You may create x zone colors with multiple thresholds by cascading multiple x zone colors this way.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/xzonecolor.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="java.util.*" %&gt;
&lt;%
// The data for the chart
double[] data = {50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58,
    59, 73, 77, 84, 82, 80, 84, 89};

// The error data representing the error band around the data points
double[] errData = {5, 6, 5.1, 6.5, 6.6, 8, 5.4, 5.1, 4.6, 5.0, 5.2, 6.0, 4.9, 5.6,
    4.8, 6.2, 7.4, 7.1, 6.5, 9.6, 12.1, 15.3, 18.5, 20.9, 24.1};

// The timestamps for the data
Date[] labels = {new GregorianCalendar(2001, 0, 1).getTime(), new GregorianCalendar(
    2001, 1, 1).getTime(), new GregorianCalendar(2001, 2, 1).getTime(),
    new GregorianCalendar(2001, 3, 1).getTime(), new GregorianCalendar(2001, 4, 1
    ).getTime(), new GregorianCalendar(2001, 5, 1).getTime(), new GregorianCalendar(
    2001, 6, 1).getTime(), new GregorianCalendar(2001, 7, 1).getTime(),
    new GregorianCalendar(2001, 8, 1).getTime(), new GregorianCalendar(2001, 9, 1
    ).getTime(), new GregorianCalendar(2001, 10, 1).getTime(), new GregorianCalendar(
    2001, 11, 1).getTime(), new GregorianCalendar(2002, 0, 1).getTime(),
    new GregorianCalendar(2002, 1, 1).getTime(), new GregorianCalendar(2002, 2, 1
    ).getTime(), new GregorianCalendar(2002, 3, 1).getTime(), new GregorianCalendar(
    2002, 4, 1).getTime(), new GregorianCalendar(2002, 5, 1).getTime(),
    new GregorianCalendar(2002, 6, 1).getTime(), new GregorianCalendar(2002, 7, 1
    ).getTime(), new GregorianCalendar(2002, 8, 1).getTime(), new GregorianCalendar(
    2002, 9, 1).getTime(), new GregorianCalendar(2002, 10, 1).getTime(),
    new GregorianCalendar(2002, 11, 1).getTime(), new GregorianCalendar(2003, 0, 1
    ).getTime()};

// Create a XYChart object of size 550 x 220 pixels
XYChart c = new XYChart(550, 220);

// Set the plot area at (50, 10) and of size 480 x 180 pixels. Enabled both vertical
// and horizontal grids by setting their colors to light grey (cccccc)
c.setPlotArea(50, 10, 480, 180).setGridColor(0xcccccc, 0xcccccc);

// Add a legend box (50, 10) (top of plot area) using horizontal layout. Use 8 pts
// Arial font. Disable bounding box (set border to transparent).
LegendBox legendBox = c.addLegend(50, 10, false, "", 8);
legendBox.setBackground(Chart.Transparent);

// Add keys to the legend box to explain the color zones
legendBox.addKey("Historical", 0x9999ff);
legendBox.addKey("Forecast", 0xff9966);

// Add a title to the y axis.
c.yAxis().setTitle("Energy Consumption");

// Set the labels on the x axis
c.xAxis().setLabels2(labels);

// Set multi-style axis label formatting. Use Arial Bold font for yearly labels and
// display them as "yyyy". Use default font for monthly labels and display them as
// "mmm". Replace some labels with minor ticks to ensure the labels are at least 3
// units apart.
c.xAxis().setMultiFormat(Chart.StartOfYearFilter(),
    "&lt;*font=Arial Bold*&gt;{value|yyyy}", Chart.StartOfMonthFilter(), "{value|mmm}", 3);

// Add a line layer to the chart
LineLayer layer = c.addLineLayer2();

// Create the color to draw the data line. The line is blue (0x333399) to the left of
// x = 18, and become a red (0xd04040) dash line to the right of x = 18.
int lineColor = layer.xZoneColor(18, 0x333399, c.dashLineColor(0xd04040,
    Chart.DashLine));

// Add the data line
layer.addDataSet(data, lineColor, "Average");

// We are not showing the data set name in the legend box. The name is for showing in
// tool tips only.
layer.setLegend(Chart.NoLegend);

// Create the color to draw the err zone. The color is semi-transparent blue
// (0x809999ff) to the left of x = 18, and become semi-transparent red (0x80ff9966)
// to the right of x = 18.
int errColor = layer.xZoneColor(18, 0x809999ff, 0x80ff9966);

// Add the upper border of the err zone
layer.addDataSet(new ArrayMath(data).add(errData).result(), errColor, "Upper bound");

// Add the lower border of the err zone
layer.addDataSet(new ArrayMath(data).sub(errData).result(), errColor, "Lower bound");

// Set the default line width to 2 pixels
layer.setLineWidth(2);

// In this example, we are not showing the data set name in the legend box
layer.setLegend(Chart.NoLegend);

// Color the region between the err zone lines
c.addInterLineLayer(layer.getLine(1), layer.getLine(2), errColor);

// Output the chart
String chart1URL = c.makeSession(request, "chart1");

// Include tool tip for the chart.
String imageMap1 = c.getHTMLImageMap("", "",
    "title='{dataSetName} on {xLabel|mmm yyyy}: {value} MJoule'");
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    X Zone Coloring
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1URL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=imageMap1%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/xzonecolor.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import ChartDirector.*;

public class xzonecolor implements DemoModule
{
    //Name of demo program
    public String toString() { return "X Zone Coloring"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 1; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the chart
        double[] data = {50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67,
            67, 58, 59, 73, 77, 84, 82, 80, 84, 89};

        // The error data representing the error band around the data points
        double[] errData = {5, 6, 5.1, 6.5, 6.6, 8, 5.4, 5.1, 4.6, 5.0, 5.2, 6.0,
            4.9, 5.6, 4.8, 6.2, 7.4, 7.1, 6.5, 9.6, 12.1, 15.3, 18.5, 20.9, 24.1};

        // The timestamps for the data
        Date[] labels = {new GregorianCalendar(2001, 0, 1).getTime(),
            new GregorianCalendar(2001, 1, 1).getTime(), new GregorianCalendar(2001,
            2, 1).getTime(), new GregorianCalendar(2001, 3, 1).getTime(),
            new GregorianCalendar(2001, 4, 1).getTime(), new GregorianCalendar(2001,
            5, 1).getTime(), new GregorianCalendar(2001, 6, 1).getTime(),
            new GregorianCalendar(2001, 7, 1).getTime(), new GregorianCalendar(2001,
            8, 1).getTime(), new GregorianCalendar(2001, 9, 1).getTime(),
            new GregorianCalendar(2001, 10, 1).getTime(), new GregorianCalendar(2001,
            11, 1).getTime(), new GregorianCalendar(2002, 0, 1).getTime(),
            new GregorianCalendar(2002, 1, 1).getTime(), new GregorianCalendar(2002,
            2, 1).getTime(), new GregorianCalendar(2002, 3, 1).getTime(),
            new GregorianCalendar(2002, 4, 1).getTime(), new GregorianCalendar(2002,
            5, 1).getTime(), new GregorianCalendar(2002, 6, 1).getTime(),
            new GregorianCalendar(2002, 7, 1).getTime(), new GregorianCalendar(2002,
            8, 1).getTime(), new GregorianCalendar(2002, 9, 1).getTime(),
            new GregorianCalendar(2002, 10, 1).getTime(), new GregorianCalendar(2002,
            11, 1).getTime(), new GregorianCalendar(2003, 0, 1).getTime()};

        // Create a XYChart object of size 550 x 220 pixels
        XYChart c = new XYChart(550, 220);

        // Set the plot area at (50, 10) and of size 480 x 180 pixels. Enabled both
        // vertical and horizontal grids by setting their colors to light grey
        // (cccccc)
        c.setPlotArea(50, 10, 480, 180).setGridColor(0xcccccc, 0xcccccc);

        // Add a legend box (50, 10) (top of plot area) using horizontal layout. Use
        // 8 pts Arial font. Disable bounding box (set border to transparent).
        LegendBox legendBox = c.addLegend(50, 10, false, "", 8);
        legendBox.setBackground(Chart.Transparent);

        // Add keys to the legend box to explain the color zones
        legendBox.addKey("Historical", 0x9999ff);
        legendBox.addKey("Forecast", 0xff9966);

        // Add a title to the y axis.
        c.yAxis().setTitle("Energy Consumption");

        // Set the labels on the x axis
        c.xAxis().setLabels2(labels);

        // Set multi-style axis label formatting. Use Arial Bold font for yearly
        // labels and display them as "yyyy". Use default font for monthly labels and
        // display them as "mmm". Replace some labels with minor ticks to ensure the
        // labels are at least 3 units apart.
        c.xAxis().setMultiFormat(Chart.StartOfYearFilter(),
            "&lt;*font=Arial Bold*&gt;{value|yyyy}", Chart.StartOfMonthFilter(),
            "{value|mmm}", 3);

        // Add a line layer to the chart
        LineLayer layer = c.addLineLayer2();

        // Create the color to draw the data line. The line is blue (0x333399) to the
        // left of x = 18, and become a red (0xd04040) dash line to the right of x =
        // 18.
        int lineColor = layer.xZoneColor(18, 0x333399, c.dashLineColor(0xd04040,
            Chart.DashLine));

        // Add the data line
        layer.addDataSet(data, lineColor, "Average");

        // We are not showing the data set name in the legend box. The name is for
        // showing in tool tips only.
        layer.setLegend(Chart.NoLegend);

        // Create the color to draw the err zone. The color is semi-transparent blue
        // (0x809999ff) to the left of x = 18, and become semi-transparent red
        // (0x80ff9966) to the right of x = 18.
        int errColor = layer.xZoneColor(18, 0x809999ff, 0x80ff9966);

        // Add the upper border of the err zone
        layer.addDataSet(new ArrayMath(data).add(errData).result(), errColor,
            "Upper bound");

        // Add the lower border of the err zone
        layer.addDataSet(new ArrayMath(data).sub(errData).result(), errColor,
            "Lower bound");

        // Set the default line width to 2 pixels
        layer.setLineWidth(2);

        // In this example, we are not showing the data set name in the legend box
        layer.setLegend(Chart.NoLegend);

        // Color the region between the err zone lines
        c.addInterLineLayer(layer.getLine(1), layer.getLine(2), errColor);

        // Output the chart
        viewer.setImage(c.makeImage());

        // Include tool tip for the chart.
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{dataSetName} on {xLabel|mmm yyyy}: {value} MJoule'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new xzonecolor();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);

        // Create the chart and put them in the content pane
        ChartViewer viewer = new ChartViewer();
        demo.createChart(viewer, 0);
        frame.getContentPane().add(viewer);

        // Display the window
        frame.pack();
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
