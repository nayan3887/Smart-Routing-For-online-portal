<HTML>
<HEAD>
<Title>Surface Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Surface Shading</p>
<hr class="separator">
<div class="content">
<img src="images/surfaceshading0.jpg">&nbsp;&nbsp;<img src="images/surfaceshading1.jpg">&nbsp;&nbsp;<img src="images/surfaceshading2.jpg">&nbsp;&nbsp;<img src="images/surfaceshading3.jpg">
<br><br>
This example demonstrates the effects of various surface shading methods, configured using <a href="SurfaceChart.setShadingMode.htm">SurfaceChart.setShadingMode</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/surfaceshading.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="javax.servlet.http.*" %&gt;
&lt;%!
// A simple structure to represent a chart image with an image map
private static class ImageWithHotSpot
{
    String imageURL;
    String imageMap;
}

// Function to create the demo charts
ImageWithHotSpot createChart(HttpServletRequest request, int index)
{
    // The x and y coordinates of the grid
    double[] dataX = {-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10};
    double[] dataY = {-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10};

    // The values at the grid points. In this example, we will compute the values
    // using the formula z = x * sin(y) + y * sin(x).
    double[] dataZ = new double[(dataX.length) * (dataY.length)];
    for (int yIndex = 0; yIndex &lt; dataY.length; ++yIndex) {
        double y = dataY[yIndex];
        for (int xIndex = 0; xIndex &lt; dataX.length; ++xIndex) {
            double x = dataX[xIndex];
            dataZ[yIndex * (dataX.length) + xIndex] = x * Math.sin(y) + y * Math.sin(
                x);
        }
    }

    // Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
    // background and grey (888888) border.
    SurfaceChart c = new SurfaceChart(380, 400, 0xffffff, 0x888888);

    // Demonstrate various shading methods
    if (index == 0) {
        c.addTitle("11 x 11 Data Points\nSmooth Shading");
    } else if (index == 1) {
        c.addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading");
        c.setInterpolation(50, 50);
    } else if (index == 2) {
        c.addTitle("11 x 11 Data Points\nRectangular Shading");
        c.setShadingMode(Chart.RectangularShading);
    } else {
        c.addTitle("11 x 11 Data Points\nTriangular Shading");
        c.setShadingMode(Chart.TriangularShading);
    }

    // Set the center of the plot region at (175, 200), and set width x depth x
    // height to 200 x 200 x 160 pixels
    c.setPlotRegion(175, 200, 200, 200, 160);

    // Set the plot region wall thichness to 5 pixels
    c.setWallThickness(5);

    // Set the elevation and rotation angles to 45 and 60 degrees
    c.setViewAngle(45, 60);

    // Set the perspective level to 35
    c.setPerspective(35);

    // Set the data to use to plot the chart
    c.setData(dataX, dataY, dataZ);

    // Set contour lines to semi-transparent black (c0000000)
    c.setContourColor(0xc0000000);

    // Output the chart
    ImageWithHotSpot ret = new ImageWithHotSpot();
    ret.imageURL = c.makeSession(request, "chart" + index, Chart.JPG);
    return ret;
}
%&gt;
&lt;%
ImageWithHotSpot chart0 = createChart(request, 0);
ImageWithHotSpot chart1 = createChart(request, 1);
ImageWithHotSpot chart2 = createChart(request, 2);
ImageWithHotSpot chart3 = createChart(request, 3);
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Surface Shading
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart0.imageURL)%&gt;'&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1.imageURL)%&gt;'&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart2.imageURL)%&gt;'&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart3.imageURL)%&gt;'&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/surfaceshading.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class surfaceshading implements DemoModule
{
    //Name of demo program
    public String toString() { return "Surface Shading"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 4; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The x and y coordinates of the grid
        double[] dataX = {-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10};
        double[] dataY = {-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10};

        // The values at the grid points. In this example, we will compute the values
        // using the formula z = x * sin(y) + y * sin(x).
        double[] dataZ = new double[(dataX.length) * (dataY.length)];
        for (int yIndex = 0; yIndex &lt; dataY.length; ++yIndex) {
            double y = dataY[yIndex];
            for (int xIndex = 0; xIndex &lt; dataX.length; ++xIndex) {
                double x = dataX[xIndex];
                dataZ[yIndex * (dataX.length) + xIndex] = x * Math.sin(y) + y *
                    Math.sin(x);
            }
        }

        // Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
        // background and grey (888888) border.
        SurfaceChart c = new SurfaceChart(380, 400, 0xffffff, 0x888888);

        // Demonstrate various shading methods
        if (index == 0) {
            c.addTitle("11 x 11 Data Points\nSmooth Shading");
        } else if (index == 1) {
            c.addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading");
            c.setInterpolation(50, 50);
        } else if (index == 2) {
            c.addTitle("11 x 11 Data Points\nRectangular Shading");
            c.setShadingMode(Chart.RectangularShading);
        } else {
            c.addTitle("11 x 11 Data Points\nTriangular Shading");
            c.setShadingMode(Chart.TriangularShading);
        }

        // Set the center of the plot region at (175, 200), and set width x depth x
        // height to 200 x 200 x 160 pixels
        c.setPlotRegion(175, 200, 200, 200, 160);

        // Set the plot region wall thichness to 5 pixels
        c.setWallThickness(5);

        // Set the elevation and rotation angles to 45 and 60 degrees
        c.setViewAngle(45, 60);

        // Set the perspective level to 35
        c.setPerspective(35);

        // Set the data to use to plot the chart
        c.setData(dataX, dataY, dataZ);

        // Set contour lines to semi-transparent black (c0000000)
        c.setContourColor(0xc0000000);

        // Output the chart
        viewer.setImage(c.makeImage());
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new surfaceshading();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);
        frame.getContentPane().setLayout(new FlowLayout(FlowLayout.LEFT));
        frame.setSize(800, 450);

        // Create the charts and put them in the content pane
        for (int i = 0; i &lt; demo.getNoOfCharts(); ++i)
        {
            ChartViewer viewer = new ChartViewer();
            demo.createChart(viewer, i);
            frame.getContentPane().add(viewer);
        }

        // Display the window
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
