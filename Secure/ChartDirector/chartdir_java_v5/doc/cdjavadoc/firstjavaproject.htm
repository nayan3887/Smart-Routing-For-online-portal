<HTML>
<HEAD>
<Title>The First Java Project</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">The First Java Project</p>
<hr class="separator">
<div class="content"><img src="images/simplebar.png"><br><br>
This section introduces using ChartDirector in standalone Java application. If you are using ChartDirector in JSP, you may refer to <a href="firstproject.htm">The First JSP Project</a> instead.<br><br>
To get a feeling of using ChartDirector, and to verify the ChartDirector development environment is set up properly, we will begin by building a very simple bar chart.<br><br>
The following code is based on the sample programs that come with ChartDirector. If you have not yet installed the sample programs, it is highly recommended you install them now. Please refer to the <a href="install.htm"> Installation</a> section for details. They are very useful for exploring and testing the features of ChartDirector.<br><br>
The following code module contains the static "main" method that allows it to run as a standalone program. It also implements the "DemoModule" interface, which allows it to run as part of the ChartDirectorDemo sample code browsing program (javademo/ChartDirectorDemo.java).<br><br>
<b>[Java Version]</b> javademo/simplebar.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class simplebar implements DemoModule
{
    //Name of demo program
    public String toString() { return "Simple Bar Chart"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 1; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the bar chart
        double[] data = {85, 156, 179.5, 211, 123};

        // The labels for the bar chart
        String[] labels = {"Mon", "Tue", "Wed", "Thu", "Fri"};

        // Create a XYChart object of size 250 x 250 pixels
        XYChart c = new XYChart(250, 250);

        // Set the plotarea at (30, 20) and of size 200 x 200 pixels
        c.setPlotArea(30, 20, 200, 200);

        // Add a bar chart layer using the given data
        c.addBarLayer(data);

        // Set the labels on the x axis.
        c.xAxis().setLabels(labels);

        // Output the chart
        viewer.setImage(c.makeImage());

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{xLabel}: US${value}K'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new simplebar();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);

        // Create the chart and put them in the content pane
        ChartViewer viewer = new ChartViewer();
        demo.createChart(viewer, 0);
        frame.getContentPane().add(viewer);

        // Display the window
        frame.pack();
        frame.setVisible(true);
    }
}</pre></tr></td></table><br>
The code is explained below:<br><br>
<ul>
<li><pre>import ChartDirector.*;</pre><br>
The above line imports the ChartDirector namespace into the program to simplify the code. Instead of writing "ChartDirector.XYChart", you can simply write "XYChart".<br><br>
<li><pre>XYChart c = new <a href="XYChart.XYChart.htm">XYChart</a>(250, 250);</pre><br>
The first step in creating any chart in ChartDirector is to create the appropriate chart object. In this example, an <a href="XYChart.htm">XYChart</a> object of size 250 x 250 pixels is created. In ChartDirector, XYChart represents any chart that has x- axis and y-axis, such as the bar chart we are drawing.<br><br>
<li><pre>c.<a href="XYChart.setPlotArea.htm">setPlotArea</a>(30, 20, 200, 200);</pre><br>
The second step in creating a bar chart is to specify where should we draw the bar chart. This is by specifying the rectangle that contains the bar chart. The rectangle is specified by using the (x, y) coordinates of its top-left corner, together with its width and height.<br><br>
For this simple bar chart, we will use the majority of the chart area to draw the bar chart. We will leave some margin to allow for the text labels on the axis. In the above code, the top-left corner is set to (30, 30), and both the width and height is set to 200 pixels. Since the entire chart is 250 x 250 in size, there will be 20 to 30 pixels margin for the text labels.<br><br>
Note that ChartDirector uses a pixel coordinate system that is customary for computer screen. The x pixel coordinate is increasing from left to right. The y pixel coordinate is increasing from top to bottom. The origin (0, 0) is at the top-left corner.<br><br>
For more complex charts which may contain titles, legend box and other things, we can use this method (and other methods) to design the exact layout of the entire chart.<br><br>
<li><pre>c.<a href="XYChart.addBarLayer.htm">addBarLayer</a>(data);</pre><br>
The above code adds a bar layer to the XYChart. In ChartDirector, any chart type that has x-axis and y-axis is represented as a layer in the XYChart. An XYChart can contain multiple layers. This allows "combination charts" to be created easily by combining different layers on the same chart (eg., a chart containing a line layer on top of a bar layer) .<br><br>
In the above line of code, the argument is an array of numbers representing the values of the data points.<br><br>
<li><pre>c.<a href="XYChart.xAxis.htm">xAxis</a>().<a href="Axis.setLabels.htm">setLabels</a>(labels);</pre><br>
The above code sets the labels on the x-axis. The first method <a href="XYChart.xAxis.htm">XYChart.xAxis</a> retrieves the <a href="Axis.htm">Axis</a> object that represents the x-axis. The second method <a href="Axis.setLabels.htm">Axis.setLabels</a> binds the text labels to the x-axis. The argument to the setLabels method is an array of text strings.<br><br>
<li><pre>viewer.<a href="ChartViewer.setImage.htm">setImage</a>(c.<a href="BaseChart.makeImage.htm">makeImage</a>());</pre><br>
Up to this point, the chart is completed. In this project, we output the chart as a java.awt.Image object using <a href="BaseChart.makeImage.htm">BaseChart.makeImage</a>, and set it to the <a href="ChartViewer.htm">ChartViewer</a> component for display.<br><br>
The ChartViewer component is an extension to the javax.swing.JLabel component. In addition to displaying the chart image, it also supports tool tips on data points and other mouse interactions.<br><br>
<li><pre>viewer.<a href="ChartViewer.setImageMap.htm">setImageMap</a>(c.<a href="BaseChart.getHTMLImageMap.htm">getHTMLImageMap</a>("clickable", "",
    "title='{xLabel}: US${value}K'"));</pre><br>
After creating the chart image, an image map can be created for the chart to configure mouse interactions. In this example, the image map is configured to display tool tips of the format <code>"title='{xLabel}: US${value}K'"</code> when the mouse cursor is on top of the bars.<br><br>
Note that mouse interactions are optional. Your can always leave out the <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a> code if mouse interactions are not required.<br><br>
</ul>
<div style="background-color:#cccccc;width:99%;padding:10px"> <b>Note:</b> The trial version of ChartDirector will include small yellow banners at the bottom of the charts it produces. These banners will disappear in the licensed version of ChartDirector. </div></div><br>
<hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
