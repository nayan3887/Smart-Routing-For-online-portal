<HTML>
<HEAD>
<Title>Circular Label Layout</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Circular Label Layout</p>
<hr class="separator">
<div class="content">
<img src="images/circlelabelpie0.png">&nbsp;&nbsp;<img src="images/circlelabelpie1.png">
<br><br>
This example demonstrates label positioning in the "circular label layout" method.<br><br>
By default, in "circular label layout", the sector labels will be external and close to the pie perimeter.<br><br>
The <a href="PieChart.setLabelPos.htm">PieChart.setLabelPos</a> method can be used to control the distance between the labels and the pie perimeter, and add join lines to connect the labels to the sectors. The join lines are useful if the labels are far away from the pie perimeter.<br><br>
The distance between the sector labels and the pie perimeter can be negative, in which case the labels will be internal to the pie.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/circlelabelpie.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="javax.servlet.http.*" %&gt;
&lt;%!
// A simple structure to represent a chart image with an image map
private static class ImageWithHotSpot
{
    String imageURL;
    String imageMap;
}

// Function to create the demo charts
ImageWithHotSpot createChart(HttpServletRequest request, int index)
{
    // The data for the pie chart
    double[] data = {42, 18, 8};

    // The labels for the pie chart
    String[] labels = {"Agree", "Disagree", "Not Sure"};

    // The colors to use for the sectors
    int[] colors = {0x66ff66, 0xff6666, 0xffff00};

    // Create a PieChart object of size 300 x 300 pixels. Set the background to a
    // gradient color from blue (aaccff) to sky blue (ffffff), with a grey (888888)
    // border. Use rounded corners and soft drop shadow.
    PieChart c = new PieChart(300, 300);
    c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xaaccff,
        0xffffff), 0x888888);
    c.setRoundedFrame();
    c.setDropShadow();

    if (index == 0) {
    //============================================================
    //    Draw a pie chart where the label is on top of the pie
    //============================================================

        // Set the center of the pie at (150, 150) and the radius to 120 pixels
        c.setPieSize(150, 150, 120);

        // Set the label position to -40 pixels from the perimeter of the pie (-ve
        // means label is inside the pie)
        c.setLabelPos(-40);

    } else {
    //============================================================
    //    Draw a pie chart where the label is outside the pie
    //============================================================

        // Set the center of the pie at (150, 150) and the radius to 80 pixels
        c.setPieSize(150, 150, 80);

        // Set the sector label position to be 20 pixels from the pie. Use a join
        // line to connect the labels to the sectors.
        c.setLabelPos(20, Chart.LineColor);

    }

    // Set the pie data and the pie labels
    c.setData(data, labels);

    // Set the sector colors
    c.setColors2(Chart.DataColor, colors);

    // Use local gradient shading, with a 1 pixel semi-transparent black (bb000000)
    // border
    c.setSectorStyle(Chart.LocalGradientShading, 0xbb000000, 1);

    // Output the chart
    ImageWithHotSpot ret = new ImageWithHotSpot();
    ret.imageURL = c.makeSession(request, "chart" + index);

    // Include tool tip for the chart
    ret.imageMap = c.getHTMLImageMap("", "",
        "title='{label}: {value} responses ({percent}%)'");

    return ret;
}
%&gt;
&lt;%
ImageWithHotSpot chart0 = createChart(request, 0);
ImageWithHotSpot chart1 = createChart(request, 1);
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Circular Label Layout
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart0.imageURL)%&gt;'
    usemap="#map0" border="0"&gt;
&lt;map name="map0"&gt;&lt;%=chart0.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1.imageURL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=chart1.imageMap%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Java Version]</b> javademo/circlelabelpie.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class circlelabelpie implements DemoModule
{
    //Name of demo program
    public String toString() { return "Circular Label Layout"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 2; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int index)
    {
        // The data for the pie chart
        double[] data = {42, 18, 8};

        // The labels for the pie chart
        String[] labels = {"Agree", "Disagree", "Not Sure"};

        // The colors to use for the sectors
        int[] colors = {0x66ff66, 0xff6666, 0xffff00};

        // Create a PieChart object of size 300 x 300 pixels. Set the background to a
        // gradient color from blue (aaccff) to sky blue (ffffff), with a grey
        // (888888) border. Use rounded corners and soft drop shadow.
        PieChart c = new PieChart(300, 300);
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xaaccff,
            0xffffff), 0x888888);
        c.setRoundedFrame();
        c.setDropShadow();

        if (index == 0) {
        //============================================================
        //    Draw a pie chart where the label is on top of the pie
        //============================================================

            // Set the center of the pie at (150, 150) and the radius to 120 pixels
            c.setPieSize(150, 150, 120);

            // Set the label position to -40 pixels from the perimeter of the pie
            // (-ve means label is inside the pie)
            c.setLabelPos(-40);

        } else {
        //============================================================
        //    Draw a pie chart where the label is outside the pie
        //============================================================

            // Set the center of the pie at (150, 150) and the radius to 80 pixels
            c.setPieSize(150, 150, 80);

            // Set the sector label position to be 20 pixels from the pie. Use a join
            // line to connect the labels to the sectors.
            c.setLabelPos(20, Chart.LineColor);

        }

        // Set the pie data and the pie labels
        c.setData(data, labels);

        // Set the sector colors
        c.setColors2(Chart.DataColor, colors);

        // Use local gradient shading, with a 1 pixel semi-transparent black
        // (bb000000) border
        c.setSectorStyle(Chart.LocalGradientShading, 0xbb000000, 1);

        // Output the chart
        viewer.setImage(c.makeImage());

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "",
            "title='{label}: {value} responses ({percent}%)'"));
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new circlelabelpie();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);
        frame.getContentPane().setLayout(new FlowLayout(FlowLayout.LEFT));
        frame.setSize(800, 450);

        // Create the charts and put them in the content pane
        for (int i = 0; i &lt; demo.getNoOfCharts(); ++i)
        {
            ChartViewer viewer = new ChartViewer();
            demo.createChart(viewer, i);
            frame.getContentPane().add(viewer);
        }

        // Display the window
        frame.setVisible(true);
    }
}</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
