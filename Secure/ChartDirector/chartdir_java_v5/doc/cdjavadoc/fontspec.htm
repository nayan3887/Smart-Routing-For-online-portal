<HTML>
<HEAD>
<Title>Font Specification</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector Ver 5.0 (Java Edition)</p>
<p class="heading1">Font Specification</p>
<hr class="separator">
<p class="heading2a">Font Name</p><div class="content">
In ChartDirector for Java, a font can be specified using the format:<br><br>
<div style="margin-left:25;font-family:courier new,courier">
<pre>{font name} [Bold] [Italic]</pre> </div><br>
where "{font name}" is a Java compatible font name (that is, the font name that is used in java.awt.Font). The "[Bold]" and "[Italic]" are optional. The followings are some examples:<br><br>
<div style="margin-left:25;font-family:courier new,courier">
<pre>Arial Bold
Times New Roman
Courier Bold Italic
SansSerif</pre> </div><br>
When using the above format, you may use all fonts that are known to the Java system.<br><br>
ChartDirector also supports using true-type fonts that are unknown to the Java system. This is useful if you are using private fonts in your application. The method is by specifying the font using the font file name. ChartDirector will search the font file from the class path, and also will search using the java library path (java.library.path).<br><br>
For example, if you are using ChartDirector on a web server, you can put the fonts files in the WEB-INF/classes inside your web application directory. In this way, you can use your own fonts without relying on the fonts provided by the web server.<br><br>
<div style="background-color:#cccccc;width:99%;padding:10px"> <b>Note:</b> Private font files support require Java 1.3 or above. </div><br>
<div style="background-color:#cccccc;width:99%;padding:10px">
<b>Note:</b> Using Java fonts or private font files requires your Java font system be functional (java.awt.Font is functional).<br><br>
Java on Microsoft Windows, Mac OS X, and Java systems that interacts with a GUI (such as standalone Java programs and Java Applets) always have functional font systems. However, some server side Java systems, such as the Java for running JSP or servlets on Linux/UNIX servers, may not have a working font system.<br><br>
It is because many Java systems on Linux/UNIX rely on X Window services to support fonts. On the other hand, many servers do not need a GUI and may not have X Window. In these cases, any attempt to use the Java font system (eg. simply create a java.awt.Font object) will cause Java to throw an Error.<br><br>
To solve this problem, ChartDirector comes with its own internal font system. If the Java font system is not functional, ChartDirector will automatically use its internal font system, so the charts will still work. The internal font system only have 3 fonts - generic sans serif (Arial like font), generic serif (Times New Roman like font) and generic monospace (Courier like font). All of them have bold, italic and bold-italic styles.<br><br>
If you are encounter the above problem but still want to use the Java font system, you may start Java in "headless" mode (requires Java 1.4 or above). Please refer to the link below on how to start Java in "headless" mode.<br><br>
<div style="margin-left:25;font-family:courier new,courier"> <nobr> <a href="http://java.sun.com/j2se/1.4.2/docs/guide/awt/AWTChanges.html#headless"> http://java.sun.com/j2se/1.4.2/docs/guide/awt/AWTChanges.html#headless</a></nobr> </nobr> </div><br>
If you are using Java 1.3 or Java 1.2 and you want to use the Java font system, you may need to install a working GUI subsystem on your computer.
</div><br>
</div><p class="heading2">Font List</p><div class="content">
Instead of specifying a single font file as the font name, you may specify a list of font files as the font name, separated by semi-colons. This is useful when using international characters that are only available in some fonts.<br><br>
For example, if you would like to use the Arial font for western characters, and the MingLiu font  for Chinese characters (since the Arial font does not have Chinese characters), you may specify the font name as "Arial;MingLiu". In this case, ChartDirector will try the Arial font first. If it cannot find a certain character there, it will try the MingLiu font.
</div><p class="heading2">Indirect Font Names</p><div class="content">
ChartDirector supports several special keywords for specifying the font name indirectly. When these keywords are used as font names, ChartDirector will look up the actual font names from a font table. The keywords are as follows:<br><br>
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="19%">Keywords<th width="79%">Description <tr><td>"normal"<td>This default normal font, which is the first font in the font table. This is initially mapped to "Arial".
<tr><td>"bold"<td>The default bold font, which is the second font in the font table. This is initially mapped to "Arial Bold".
<tr><td>"italic"<td>The default italic font, which is the third font in the font table. This is initially mapped to "Arial Italic".
<tr><td>"boldItalic"<td>The default bold-italic font, which is the fourth font in the font table. This is initially mapped to "Arial Bold Italic" .
<tr><td>"font<i>N</i>"<td>The (N + 1)th font in the font table (the first font is "font0").
</table><br>
The font table can be modified using <a href="BaseChart.setFontTable.htm">BaseChart.setFontTable</a> or <a href="DrawArea.setFontTable.htm">DrawArea.setFontTable</a>.<br><br>
The advantage of using indirect font names is that you can change the fonts fonts in your charts in one place.
</div><p class="heading2">Font Index</p><div class="content">
The font index is ignored in ChartDirector for Java. It is solely for compatibility with other ChartDirector editions.
</div><p class="heading2">Font Size</p><div class="content">
The font size decides how big a font will appear in the image. The font size is expressed in a font unit called points. This is the same unit used in common word processors.<br><br>
Instead of specifying font size, some ChartDirector API (eg. <a href="TextBox.setFontSize.htm">TextBox.setFontSize</a>) allow you to specify font height and font width separately. In ChartDirector for Java, only font height is used as the font size, and font width is ignored.
</div><p class="heading2">Font Color</p><div class="content">
This is the color to draw the font. (See <a href="colorspec.htm">Color Specification</a> on how colors are represented in ChartDirector.)
</div><p class="heading2">Font Angle</p><div class="content">
This is the angle in degrees by which the font should be rotated anti-clockwise.
</div><p class="heading2">Vertical Layout</p><div class="content">
By default, text are laid out horizontally, with characters being drawn from left to right.<br><br>
ChartDirector also supports vertical layout, with characters being drawn from top to bottom. For example, you may use <a href="BaseChart.addText.htm">BaseChart.addText</a> to add text that are laid out vertically. Vertical layout is common for oriental languages such as Chinese, Japanese and Korean.</div><br>
<hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
